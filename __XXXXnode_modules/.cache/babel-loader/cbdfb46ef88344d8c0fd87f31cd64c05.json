{"remainingRequest":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/babel-loader/lib/index.js!/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/charts.js","dependencies":[{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/charts.js","mtime":1662889290817},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/babel.config.js","mtime":1641298031863},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/charts.js"],"names":["vaxios","router","AppError","db","state","chartList","getters","mutations","setCharList","payload","actions","passChartList","clist","commit","getData","params","APItoken","idDev","idsSen","config","headers","Authorization","firstSample","lastSample","get","res","status","message","getChartsFireBase","collection","then","querySnapshot","forEach","doc","data","chartlist","addChart","dispatch","chart","uidfb","index","findIndex","elem","id","push","rs","deleteChart","nchart","nChartList","filter","createChartOnFireBase","firebaseUID","set","console","log","catch","error","updateChartfireBase","eraseAllData","namespaced"],"mappings":"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","sourcesContent":["import vaxios from '@/plugins/vaxios';\nimport router from '@/router/index';\nimport AppError from '@/plugins/appError';\nimport { db } from '@/plugins/firebase';\n\nconst state = () => ({\n  chartList: [],\n});\n\nconst getters = {};\n\nconst mutations = {\n  setCharList(state, payload) {\n    state.chartList = payload;\n  },\n};\n\nconst actions = {\n  passChartList({ commit }, clist) {\n    commit('setChartList', clist);\n  },\n\n  /**\n   *  Pass object to query for data\n   *  apiToken  params[0] Not passed\n   *  idDevice  params[1]\n   *  idSensor  params[2]\n   *  dateFrom  params[3] Can be null\n   *  dateTo    params[4] Can be null\n   */\n  async getData({ commit }, params) {\n    const APItoken = params[0];\n    const idDev = params[1];\n    const idsSen = params[2];\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${APItoken}`,\n      },\n      params: {\n        firstSample: params[3],\n        lastSample: params[4],\n      },\n    };\n    try {\n      const res = await vaxios.get(\n        `/data/device/${idDev}/sensors/${idsSen}`,\n        config\n      );\n      return res;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  /**\n   *  Get chartList from firestore\n   */\n  getChartsFireBase({ commit }) {\n    db.collection('charts')\n      .get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          const data = doc.data();\n          if (data.chartlist) {\n            commit('setCharList', data.chartlist);\n          }\n        });\n      });\n  },\n  /**\n   * Checks first if chart object exists (update chart)\n   * If not we push new chart on list\n   * @param {*} param0\n   * @param {*} chart\n   */\n  async addChart({ dispatch, state }, params) {\n    //console.log('Passing chart: ', chart);\n    const chart = params[0];\n    const uidfb = params[1];\n    const index = state.chartList.findIndex((elem) => {\n      return elem.id === chart.id;\n    });\n\n    if (index > -1) {\n      //console.log('Este es el índice encontrado: ', index);\n      state.chartList[index] = chart;\n    } else {\n      state.chartList.push(chart);\n    }\n\n    try {\n      params = [uidfb];\n      const rs = await dispatch('updateChartfireBase', params);\n      return rs;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async deleteChart({ dispatch, commit, state }, params) {\n    const nchart = params[0];\n    const uidfb = params[1];\n\n    let nChartList = state.chartList.filter((chart) => {\n      return nchart.id !== chart.id;\n    });\n    // first update store chart list\n    commit('setCharList', nChartList);\n\n    // then update firestore chart info\n    try {\n      params = [uidfb];\n      const rs = await dispatch('updateChartfireBase', params);\n      return rs;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  // addSerie({ commit, state}, serie) {\n  //   this.chartList.series.push(serie);\n  // },\n\n  /**\n   *\n   * @param {https://firebase.google.com/docs/firestore/manage-data/add-data} param0\n   * @param {*} params\n   */\n  async createChartOnFireBase({ commit, state }, params) {\n    const firebaseUID = params[0];\n    const data = { chartlist: state.chartList };\n    db.collection('charts')\n      .doc(firebaseUID)\n      .set(data)\n      .then((rs) => {\n        console.log('Object created, ', rs);\n      })\n      .catch((error) => {\n        console.error('Error writing document: ', error);\n      });\n  },\n\n  async updateChartfireBase({ commit, state }, params) {\n    const firebaseUID = params[0];\n    try {\n      const data = { chartlist: state.chartList };\n      console.log('update - uid: [', firebaseUID, ']', data);\n      //await db.collection('charts').doc(firebaseUID).remove();\n      const rs = await db.collection('charts').doc(firebaseUID).set(data);\n      return rs;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  eraseAllData({ commit }) {\n    commit('setCharList', []);\n  },\n};\n\nexport default { namespaced: true, state, getters, mutations, actions };\n"]}]}