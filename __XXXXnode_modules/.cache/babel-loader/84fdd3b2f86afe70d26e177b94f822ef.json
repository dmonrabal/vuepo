{"remainingRequest":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/babel-loader/lib/index.js!/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/devices.js","dependencies":[{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/devices.js","mtime":1644066303805},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/babel.config.js","mtime":1641298031863},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/devices.js"],"names":["vaxios","AppError","state","devicesList","devicesGrpSelected","deviceSelected","sensorsList","getters","mutations","setAllDevices","payload","setDevicesGroup","setDeviceSelected","actions","selectDevice","device","commit","getDevicesProject","params","token","idPro","config","headers","Authorization","get","res","status","message","getAllDevPro","dispatch","idsPro","allDevs","Promise","all","map","ldevs","data","devices","length","concat","getDevicesGroup","idGrp","createDevice","body","post","updateDevice","idDev","update","deleteDevice","delete","console","log","getDevice","getData","APItoken","idsSen","firstSample","lastSample","passDevicesPopulated","namespaced"],"mappings":"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","sourcesContent":["import vaxios from '@/plugins/vaxios';\nimport AppError from '@/plugins/appError';\n\nconst state = () => ({\n  devicesList: [],\n  devicesGrpSelected: [],\n\n  deviceSelected: '',\n  sensorsList: [],\n});\n\nconst getters = {};\nconst mutations = {\n  setAllDevices(state, payload) {\n    state.devicesList = payload;\n  },\n\n  setDevicesGroup(state, payload) {\n    state.devicesGrpSelected = payload;\n  },\n  setDeviceSelected(state, payload) {\n    state.deviceSelected = payload;\n  },\n};\n\nconst actions = {\n  selectDevice({ commit }, device) {\n    commit('setDeviceSelected', device);\n  },\n\n  async getDevicesProject({ commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.get(`/projects/${idPro}/allDevices`, config);\n      return res;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async getAllDevPro({ dispatch, commit }, params) {\n    const token = params[0];\n    const idsPro = params[1];\n    let allDevs = [];\n    try {\n      await Promise.all(\n        idsPro.map(async (idPro) => {\n          const res = await dispatch('getDevicesProject', [token, idPro]);\n          const ldevs = res.data.devices;\n          if (ldevs.length > 0) {\n            allDevs = allDevs.concat(ldevs);\n          }\n        })\n      );\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n    commit('setAllDevices', allDevs);\n  },\n\n  async getDevicesGroup({ dispatch, commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n    const idGrp = params[2];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.get(\n        `/projects/${idPro}/groups/${idGrp}/devices`,\n        config\n      );\n      commit('setDevicesGroup', res.data.devices);\n      return res;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async createDevice({ dispatch, commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n    const idGrp = params[2];\n    const body = params[3];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.post(\n        `/projects/${idPro}/groups/${idGrp}/devices`,\n        body,\n        config\n      );\n      commit('setDeviceSelected', res.data.device);\n      return res;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async updateDevice({ dispatch, commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n    const idGrp = params[2];\n    const body = params[3];\n    const idDev = params[4];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.update(\n        `/projects/${idPro}/groups/${idGrp}/devices/${idDev}`,\n        body,\n        config\n      );\n      commit('setDeviceSelected', res.data.device);\n      return res;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async deleteDevice({ dispatch, commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n    const idGrp = params[2];\n    const idDev = params[3];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.delete(\n        `/projects/${idPro}/groups/${idGrp}/devices/${idDev}`,\n        config\n      );\n      //console.log('Respuesta delete: ', res);\n      return res;\n    } catch (err) {\n      console.log('Respuesta delete: ', err);\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async getDevice({ dispatch, commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n    const idGrp = params[2];\n    const idDev = params[3];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.get(\n        `/projects/${idPro}/groups/${idGrp}/devices/${idDev}`,\n        config\n      );\n      // console.log('getDevcie RS: ', res);\n      commit('setDeviceSelected', res.data.device);\n      return res;\n    } catch (err) {\n      console.log('Respuesta GET: ', err);\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async getData({ commit }, params) {\n    const token = params[0];\n    const APItoken = params[1];\n    const idDev = params[2];\n    const idsSen = params[3];\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${APItoken}`,\n      },\n      params: {\n        firstSample: params[4],\n        lastSample: params[5],\n      },\n    };\n\n    try {\n      //console.log('PARAMS enviados: ', params);\n      const res = await vaxios.get(\n        `/data/device/${idDev}/sensors/${idsSen}`,\n        config\n      );\n      //console.log('getData RS: ', res);\n      return res;\n    } catch (err) {\n      console.log('Respuesta GET Data: ', err);\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  passDevicesPopulated({ commit }, devices ) {\n    commit('setAllDevices', devices);\n  }\n};\n\nexport default { namespaced: true, state, getters, mutations, actions };\n"]}]}