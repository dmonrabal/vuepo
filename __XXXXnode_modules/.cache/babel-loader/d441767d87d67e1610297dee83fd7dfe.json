{"remainingRequest":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/thread-loader/dist/cjs.js!/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/babel-loader/lib/index.js!/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/projects.js","dependencies":[{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/projects.js","mtime":1648378353404},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/babel.config.js","mtime":1641298031863},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/projects.js"],"names":["vaxios","AppError","state","projectList","groupsList","projectSelected","groupSelected","totalStats","totalProjecs","totalGroups","totalUsers","totalDevices","totalSensors","callsToAPI","max","min","total","getters","mutations","setProjects","payload","projects","setProject","setGroups","setGroup","setTotalStats","actions","getProjects","token","dispatch","commit","config","headers","Authorization","get","res","data","reslg","reslstat","status","message","getProject","idProject","createProject","params","body","post","project","resUpPr","updateProject","update","deleteProject","delete","selectProject","createGroup","resDB","updateGroup","idGroup","deleteGroup","getStatsProject","stats","console","log","getTotalStats","totalGrp","totalDev","totalSen","maxCalls","minCalls","totCalls","length","Promise","all","map","idPro","_id","loadFullGroups","groups","forEach","group","groupLoad","name","push","selectGroup","eraseAllData","namespaced"],"mappings":"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","sourcesContent":["import vaxios from '@/plugins/vaxios';\nimport AppError from '@/plugins/appError';\n\nconst state = () => ({\n  projectList: [], // All projects\n  groupsList: [], // All groups\n  projectSelected: '',\n  groupSelected: '',\n  totalStats: {\n    totalProjecs: 0,\n    totalGroups: 0,\n    totalUsers: 0,\n    totalDevices: 0,\n    totalSensors: 0,\n    callsToAPI: {\n      max: 0,\n      min: 0,\n      total: 0,\n    },\n  },\n});\n\nconst getters = {};\nconst mutations = {\n  setProjects(state, payload) {\n    state.projectList = payload.projects;\n  },\n\n  setProject(state, payload) {\n    state.projectSelected = payload;\n  },\n\n  setGroups(state, payload) {\n    state.groupsList = payload;\n  },\n\n  setGroup(state, payload) {\n    state.groupSelected = payload;\n  },\n\n  setTotalStats(state, payload) {\n    state.totalStats = payload;\n  },\n};\n\nconst actions = {\n  // PROJECT ACTIONS\n  async getProjects({ dispatch, commit }, token) {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.get('/projects', config);\n      //console.log(res.data);\n      commit('setProjects', res.data);\n      const reslg = await dispatch('loadFullGroups');\n      const reslstat = await dispatch('getTotalStats', token);\n      return res;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async getProject({ commit }, idProject) {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.get(`/projects/${idProject}`);\n      return res.data;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async createProject({ dispatch, commit }, params) {\n    const token = params[0];\n    const body = params[1];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    try {\n      const res = await vaxios.post('/projects/', body, config);\n      // console.log('Res update project:', res);\n      commit('setProject', res.data.project);\n      const resUpPr = await dispatch('getProjects', token);\n      return resUpPr;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async updateProject({ dispatch, commit }, params) {\n    const token = params[0];\n    const body = params[1];\n    const idProject = params[2];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    try {\n      const res = await vaxios.update(`/projects/${idProject}`, body, config);\n      commit('setProject', res.data.project);\n      const resUpPr = await dispatch('getProjects', token);\n      return res;\n    } catch (err) {\n      //console.log('EXCEPTION updateProject: ', err);\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async deleteProject({ dispatch, commit }, params) {\n    const token = params[0];\n    const idProject = params[1];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.delete(`/projects/${idProject}`, config);\n      commit('setProject', '');\n      const resUpPr = await dispatch('getProjects', token);\n      return resUpPr;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  selectProject({ commit }, project) {\n    commit('setProject', project);\n  },\n\n  // GROUP METHODS\n  async createGroup({ dispatch, commit }, params) {\n    const token = params[0];\n    const body = params[1];\n    const idProject = params[2];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    try {\n      const resDB = await vaxios.post(\n        `/projects/${idProject}/groups`,\n        body,\n        config\n      );\n      // commit('setProject', resDB.data.project);\n      const resUpPr = await dispatch('getProjects', token);\n      return resUpPr;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async updateGroup({ dispatch, commit }, params) {\n    const token = params[0];\n    const body = params[1];\n    const idProject = params[2];\n    const idGroup = params[3];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    try {\n      const res = await vaxios.update(\n        `/projects/${idProject}/groups/${idGroup}`,\n        body,\n        config\n      );\n      // commit('setProject', res.data.project);\n      const resUpPr = await dispatch('getProjects', token);\n      return res;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async deleteGroup({ dispatch, commit }, params) {\n    const token = params[0];\n    const idProject = params[1];\n    const idGroup = params[2];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.delete(\n        `/projects/${idProject}/groups/${idGroup}`,\n        config\n      );\n      // commit('setProject', res.data.project);\n      const resUpPr = await dispatch('getProjects', token);\n      return resUpPr;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n  // Stats methods\n  async getStatsProject({ commit }, params) {\n    const token = params[0];\n    const idProject = params[1];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const stats = await vaxios.get(`/stats/project/${idProject}`, config);\n      // console.log('Mis stats: ', stats);\n      return stats;\n    } catch (err) {\n      console.log('[ERROR] projects:getStatsProject: ', err);\n    }\n  },\n\n  async getTotalStats({ dispatch, commit, state }, token) {\n    let totalGrp = 0;\n    let totalUsers = 0;\n    let totalDev = 0;\n    let totalSen = 0;\n    let maxCalls = 0;\n    let minCalls = 0;\n    let totCalls = 0;\n\n    if (state.projectList.length > 0) {\n      await Promise.all(\n        state.projectList.map(async (project) => {\n          const idPro = project._id;\n          const res = await dispatch('getStatsProject', [token, idPro]);\n\n          //console.log(res);\n          totalGrp += res.totalGroups;\n          totalUsers += res.totalUsers;\n          totalDev += res.totalDevices;\n          totalSen += res.totalSensors;\n          maxCalls += res.callsToAPI.max;\n          minCalls += res.callsToAPI.min;\n          totCalls += res.callsToAPI.total;\n\n          project.stats = {\n            totalGroups: res.totalGroups,\n            totalDevices: res.totalDevices,\n            totalSensors: res.totalSensors,\n            totalUsers: res.totalUsers,\n            maxCalls: res.callsToAPI.max,\n            minCalls: res.callsToAPI.min,\n            totCalls: res.callsToAPI.total,\n          };\n\n          //console.log('STATS: ', project.stats);\n        })\n      );\n    }\n\n    const stats = {\n      totalProjecs: state.projectList.length,\n      totalGroups: totalGrp,\n      totalUsers: totalUsers,\n      totalDevices: totalDev,\n      totalSensors: totalSen,\n      callsToAPI: {\n        max: maxCalls,\n        min: minCalls,\n        total: totCalls,\n      },\n    };\n\n    commit('setTotalStats', stats);\n  },\n\n  loadFullGroups({ commit, state }) {\n    let groups = [];\n    state.projectList.forEach((project) => {\n      //console.log('Entro en proyecto: ', project.name);\n      project.groups.forEach((group) => {\n        let groupLoad = group;\n        groupLoad.project = project.name;\n        groupLoad.idProject = project._id;\n\n        groups.push(groupLoad);\n      });\n    });\n    commit('setGroups', groups);\n  },\n\n  selectGroup({ commit, state }, group) {\n    commit('setGroup', group);\n  },\n\n  eraseAllData({ commit, state }) {\n    commit('setProjects', []);\n    commit('setProject', '');\n    commit('setGroups', []);\n    commit('setGroup', '');\n    commit('setTotalStats', '');\n  },\n};\n\nexport default { namespaced: true, state, getters, mutations, actions };\n"]}]}