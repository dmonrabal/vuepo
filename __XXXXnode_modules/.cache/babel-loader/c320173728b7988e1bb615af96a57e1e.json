{"remainingRequest":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/babel-loader/lib/index.js!/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/devices.js","dependencies":[{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/devices.js","mtime":1644000343802},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/babel.config.js","mtime":1641298031863},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/store/modules/devices.js"],"names":["vaxios","AppError","state","devicesList","devicesGrpSelected","deviceSelected","sensorsList","getters","mutations","setAllDevices","payload","setDevicesGroup","setDeviceSelected","actions","selectDevice","device","commit","getDevicesProject","params","token","idPro","config","headers","Authorization","get","res","status","message","getAllDevPro","dispatch","idsPro","allDevs","Promise","all","map","id","console","log","data","devices","length","push","getDevicesGroup","idGrp","createDevice","body","post","updateDevice","idDev","update","deleteDevice","delete","getDevice","getData","APItoken","idsSen","firstSample","lastSample","namespaced"],"mappings":"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","sourcesContent":["import vaxios from '@/plugins/vaxios';\nimport AppError from '@/plugins/appError';\n\nconst state = () => ({\n  devicesList: [],\n  devicesGrpSelected: [],\n\n  deviceSelected: '',\n  sensorsList: [],\n});\n\nconst getters = {};\nconst mutations = {\n  setAllDevices(state, payload) {\n    state.devicesList = payload;\n  },\n\n  setDevicesGroup(state, payload) {\n    state.devicesGrpSelected = payload;\n  },\n  setDeviceSelected(state, payload) {\n    state.deviceSelected = payload;\n  },\n};\n\nconst actions = {\n  selectDevice({ commit }, device) {\n    commit('setDeviceSelected', device);\n  },\n\n  async getDevicesProject({ commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.get(`/projects/${idPro}/allDevices`, config);\n      return res;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async getAllDevPro({ dispatch, commit }, params) {\n    const token = params[0];\n    const idsPro = params[1];\n    let allDevs = [];\n\n    //console.log('idsPro: ', idsPro);\n    try {\n      await Promise.all(\n        idsPro.map(async (id) => {\n          console.log('ID proyecto: ', id);\n          const res = await dispatch('getDevicesProject', [token, id]);\n          if (res.data.devices.length > 0) {\n            console.log('SI TIENE');\n            allDevs.push(res.data.devices);\n          }\n        })\n      );\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n    commit('setAllDevices', allDevs);\n  },\n\n  async getDevicesGroup({ dispatch, commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n    const idGrp = params[2];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.get(\n        `/projects/${idPro}/groups/${idGrp}/devices`,\n        config\n      );\n      commit('setDevicesGroup', res.data.devices);\n      return res;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async createDevice({ dispatch, commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n    const idGrp = params[2];\n    const body = params[3];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.post(\n        `/projects/${idPro}/groups/${idGrp}/devices`,\n        body,\n        config\n      );\n      commit('setDeviceSelected', res.data.device);\n      return res;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async updateDevice({ dispatch, commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n    const idGrp = params[2];\n    const body = params[3];\n    const idDev = params[4];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.update(\n        `/projects/${idPro}/groups/${idGrp}/devices/${idDev}`,\n        body,\n        config\n      );\n      commit('setDeviceSelected', res.data.device);\n      return res;\n    } catch (err) {\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async deleteDevice({ dispatch, commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n    const idGrp = params[2];\n    const idDev = params[3];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.delete(\n        `/projects/${idPro}/groups/${idGrp}/devices/${idDev}`,\n        config\n      );\n      //console.log('Respuesta delete: ', res);\n      return res;\n    } catch (err) {\n      console.log('Respuesta delete: ', err);\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async getDevice({ dispatch, commit }, params) {\n    const token = params[0];\n    const idPro = params[1];\n    const idGrp = params[2];\n    const idDev = params[3];\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    try {\n      const res = await vaxios.get(\n        `/projects/${idPro}/groups/${idGrp}/devices/${idDev}`,\n        config\n      );\n      // console.log('getDevcie RS: ', res);\n      commit('setDeviceSelected', res.data.device);\n      return res;\n    } catch (err) {\n      console.log('Respuesta GET: ', err);\n      return { status: 'failed', message: err.message };\n    }\n  },\n\n  async getData({ commit }, params) {\n    const token = params[0];\n    const APItoken = params[1];\n    const idDev = params[2];\n    const idsSen = params[3];\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${APItoken}`,\n      },\n      params: {\n        firstSample: params[4],\n        lastSample: params[5],\n      },\n    };\n\n    try {\n      //console.log('PARAMS enviados: ', params);\n      const res = await vaxios.get(\n        `/data/device/${idDev}/sensors/${idsSen}`,\n        config\n      );\n      //console.log('getData RS: ', res);\n      return res;\n    } catch (err) {\n      console.log('Respuesta GET Data: ', err);\n      return { status: 'failed', message: err.message };\n    }\n  },\n};\n\nexport default { namespaced: true, state, getters, mutations, actions };\n"]}]}