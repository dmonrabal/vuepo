{"remainingRequest":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/views/Mapa.vue?vue&type=style&index=0&scopped=true&lang=css&","dependencies":[{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/views/Mapa.vue","mtime":1654200446902},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZmxleGNhcmQgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKfQoKLmZsZXhjYXJkIC52LXRvb2xiYXIgewogIGZsZXg6IDA7Cn0K"},{"version":3,"sources":["Mapa.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAucA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Mapa.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-container>\n    <Loading :loading=\"cargando\"></Loading>\n    <Title\n      :title=\"'Mapa'\"\n      :color=\"'secondary--text'\"\n      :path=\"`Home / Mapa /`\"\n    ></Title>\n    <v-row>\n      <v-col cols=\"12\" lg=\"9\">\n        <MglMap\n          :accessToken=\"accessToken\"\n          :mapStyle=\"mapStyle\"\n          :center=\"coordinates\"\n          @load=\"onMapLoad\"\n        >\n          <MglMarker\n            v-for=\"device in devFiltr\"\n            :coordinates.sync=\"device.location.coordinates\"\n            color=\"blue\"\n            :key=\"device._id\"\n          >\n            <MglPopup anchor=\"bottom-right\">\n              <v-card outlined width=\"250\" height=\"120\">\n                <!-- <v-card-title class=\"text-h6 font-weight-light\">\n                  {{ device.label }}\n                </v-card-title> -->\n                <v-card-text>\n                  <div>{{ device.project.name }}</div>\n                  <div>{{ device.group.name }}</div>\n                  <div class=\"text-overline\">{{ device.label }}</div>\n                  <div>\n                    <v-icon\n                      size=\"20\"\n                      class=\"ml-25\"\n                      color=\"primary\"\n                      @click=\"viewInfo(device)\"\n                      title=\"Consultar\"\n                    >\n                      fas fa-search\n                    </v-icon>\n                  </div>\n                </v-card-text>\n              </v-card>\n            </MglPopup>\n          </MglMarker>\n\n          <!--MglMarker :coordinates.sync=\"coordinates\" color=\"blue\" /-->\n        </MglMap>\n      </v-col>\n      <v-col cols=\"12\" lg=\"3\">\n        <v-card class=\"pa-5 pl-10 pr-10 mb-2\" outlined tile height=\"800\">\n          <v-row>\n            <v-card-title class=\"text-h6 font-weight-light\"\n              >Filtros</v-card-title\n            >\n            <v-divider></v-divider>\n            <v-col cols=\"12\"\n              ><v-select\n                :items=\"proItems\"\n                dense\n                label=\"Elige un proyecto\"\n                v-model=\"proSel\"\n                @input=\"loadGroups\"\n              ></v-select>\n            </v-col>\n            <v-col cols=\"12\">\n              <v-select\n                ref=\"grpMenu\"\n                :items=\"grpItems\"\n                dense\n                :label=\"labelGrp\"\n                v-model=\"grpSel\"\n                :disabled=\"grpDis\"\n                @input=\"loadDevices\"\n              ></v-select>\n            </v-col>\n            <v-col cols=\"12\">\n              <v-select\n                :items=\"devItems\"\n                dense\n                :label=\"labelDev\"\n                v-model=\"devSel\"\n                :disabled=\"devDis\"\n                @click=\"enableFilter\"\n              ></v-select>\n            </v-col>\n            <v-col cols=\"12\" align=\"right\">\n              <v-btn\n                class=\"ma-2 text-capitalize font-weight-ligth\"\n                color=\"primary\"\n                dark\n                width=\"30%\"\n                :disabled=\"btnDis\"\n                @click=\"filterDevices\"\n              >\n                Filtrar\n              </v-btn>\n            </v-col>\n            <v-card-title class=\"text-h6 font-weight-light\"\n              >Detalle</v-card-title\n            >\n            <v-divider></v-divider>\n\n            <div v-if=\"!devLoaded\">\n              <v-card-subtitle class=\"ml-5 pa-2 font-weight-light\">\n                Ning√∫n dispositivo seleccionado\n              </v-card-subtitle>\n            </div>\n            <div v-if=\"devLoaded\">\n              <v-list dense>\n                <v-list-item\n                  v-for=\"(sensor, _id) in devDetail.sensors\"\n                  :key=\"_id\"\n                >\n                  <v-list-item-content>\n                    <v-list-item-title class=\"text-overline\">\n                      {{ sensor.name }}\n                    </v-list-item-title>\n                    <v-list-item-subtitle\n                      class=\"text-h6 font-weight-light grey--text ml-8 mt-2\"\n                    >\n                      <span v-if=\"!devDetail.lastEntry\"> - </span>\n                      <span v-else>\n                        {{ sensor.lastData }}\n                      </span>\n                      {{ sensor.symbol }}\n                    </v-list-item-subtitle>\n                  </v-list-item-content>\n                </v-list-item>\n              </v-list>\n              <div class=\"text-overline ml-2 font-weight-light grey--text\">\n                <div>Updated at {{ devDetail.lastEntry }}</div>\n              </div>\n            </div>\n          </v-row>\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport Title from '@/components/Title';\nimport Loading from '@/components/Loading';\nimport { mapState } from 'vuex';\n\nimport Mapbox from 'mapbox-gl';\nimport { MglMap, MglMarker, MglPopup } from 'vue-mapbox';\n\nexport default {\n  data() {\n    return {\n      cargando: false,\n      accessToken: process.env.VUE_APP_MAPBOX_TOKEN,\n      mapStyle: 'mapbox://styles/mapbox/satellite-v9',\n      coordinates: [2.9862918733796486, 39.57380640335257],\n      devDetail: '',\n      devLoaded: false,\n\n      devInit: [],\n      devFiltr: [],\n      proItems: [],\n      grpItems: [],\n      devItems: [],\n      senItems: [],\n      datItems: [],\n      dateReq: [],\n\n      labelGrp: 'Elige un grupo',\n      labelDev: 'Elige un dispositivo',\n\n      menu: false,\n\n      proSel: '',\n      grpSel: '',\n      devSel: '',\n      senSel: '',\n\n      grpDis: true,\n      devDis: true,\n      btnDis: true,\n\n      showTable: false,\n    };\n  },\n  components: {\n    Title,\n    Loading,\n    MglMap,\n    MglMarker,\n    MglPopup,\n  },\n  computed: {\n    ...mapState(['projects', 'groups', 'users', 'devices']),\n  },\n  methods: {\n    enableFilter() {\n      this.btnDis = false;\n    },\n\n    /**\n     * This method is used for get group info in devices objects.\n     * By default, each device only contains _id group field.\n     * In order to provide update and create functions, is\n     * necessary dispose this info in forms.\n     */\n    populateProGrp() {\n      // Group treatment Get idGroup and name\n      const ldevPop = []; //\n\n      this.devices.devicesList.forEach((dev) => {\n        const idPro = dev.project._id;\n        const idGrp = dev.group;\n        const pro = this.projects.projectList.find(\n          (item) => item._id === idPro\n        );\n        const grp = pro.groups.find((item) => item._id === idGrp);\n        if (!pro || !grp) {\n          console.log('MALLLLLL grupo o proyecto no encontrado!!!!');\n        } else {\n          delete dev.group;\n          let ngrp = {\n            _id: grp._id,\n            name: grp.name,\n            code: grp.code,\n          };\n          dev.group = ngrp;\n        }\n        ldevPop.push(dev);\n        //console.log('DEV->', dev);\n      });\n      this.$store.dispatch('devices/passDevicesPopulated', ldevPop);\n\n      this.devInit = this.devices.devicesList.filter((device) => {\n        if (\n          device.location &&\n          device.location.coordinates &&\n          device.location.coordinates.length === 2\n        ) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      this.devFiltr = this.devInit;\n    },\n\n    async loadProjects() {\n      try {\n        const token = this.users.user.token;\n        const res = await this.$store.dispatch('projects/getProjects', token);\n        if (res.data.projects) {\n          this.proItems = res.data.projects.map((p) => {\n            return { text: p.name, value: p._id };\n          });\n\n          this.proItems.unshift({ text: 'Todos', value: 'all' });\n        }\n        //console.log('RESPUESTA: ', res);\n        return res;\n      } catch (err) {\n        console.log('[ERROR] - loadProjects: ' + err.message);\n      }\n    },\n\n    async loadAllDevices() {\n      try {\n        const token = this.users.user.token;\n        let ids = this.projects.projectList.map((project) => project._id);\n        const params = [token, ids];\n        await this.$store.dispatch('devices/getAllDevPro', params);\n        this.populateProGrp();\n      } catch (e) {\n        console.log('[ERROR] - LoadDevices: ' + e.message);\n      }\n    },\n\n    loadGroups() {\n      this.grpSel = 'all';\n      this.devSel = 'all';\n      this.labelGrp = 'Elige un grupo';\n      this.labelDev = 'Elige un dispositivo';\n\n      if (this.proSel === 'all') {\n        this.devFiltr = this.devInit;\n        return;\n      }\n\n      this.grpDis = false;\n      this.devDis = true;\n      this.btnDis = true;\n      this.grpItems = [];\n      this.devItems = [];\n\n      //console.log('Project id selected: ', this.proSel);\n      this.projects.projectList.forEach((p) => {\n        if (p._id === this.proSel) {\n          this.grpItems = p.groups.map((g) => {\n            return { text: g.name, value: g._id };\n          });\n\n          this.grpItems.unshift({ text: 'Todos', value: 'all' });\n        }\n      });\n    },\n\n    async loadDevices() {\n      if (this.grpSel === 'all') {\n        this.devSel = 'all';\n        this.devDis = true;\n        this.btnDis = false;\n        return;\n      }\n\n      this.devDis = false;\n      this.btnDis = true;\n\n      try {\n        let params = [this.users.user.token];\n        params.push(this.proSel);\n        params.push(this.grpSel);\n        const res = await this.$store.dispatch(\n          'devices/getDevicesGroup',\n          params\n        );\n\n        if (res.data.devices) {\n          this.devItems = res.data.devices.map((d) => {\n            return { text: d.name, value: d._id };\n          });\n          this.devItems.unshift({ text: 'Todos', value: 'all' });\n        }\n        return res;\n      } catch (err) {\n        console.log('[ERROR] - loadDevices: ' + err.message);\n      }\n    },\n\n    filterDevices() {\n      this.devFiltr = this.devInit;\n      this.devDetail = '';\n\n      if (this.proSel !== 'all') {\n        this.devFiltr = this.devFiltr.filter((device) => {\n          //console.log('-------> Project filtered: ', device.project._id);\n          if (device.project._id === this.proSel) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n\n        if (this.grpSel !== 'all') {\n          this.devFiltr = this.devFiltr.filter((device) => {\n            //console.log('-------> Group filtered: ', device.group._id);\n            if (device.group._id === this.grpSel) {\n              return true;\n            } else {\n              return false;\n            }\n          });\n\n          if (this.devSel !== 'all') {\n            this.devFiltr = this.devFiltr.filter((device) => {\n              //console.log('-------> Device filtered: ', device._id);\n              if (device._id === this.devSel) {\n                return true;\n              } else {\n                return false;\n              }\n            });\n          }\n        }\n      } else {\n        this.devFiltr = this.devInit;\n      }\n    },\n\n    loadCoordinates() {\n      const defCoor = [2.9862918733796486, 39.57380640335257];\n      this.coordinates = defCoor;\n\n      this.devFiltr = this.devices.devicesList.filter((device) => {\n        if (\n          device.location &&\n          device.location.coordinates &&\n          device.location.coordinates.length === 2\n        ) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    },\n\n    async onMapLoad(event) {\n      const asyncActions = event.component.actions;\n\n      const newParams = await asyncActions.flyTo({\n        center: this.coordinates,\n        zoom: 10,\n        speed: 1,\n      });\n    },\n\n    async viewInfo(device) {\n      this.devLoaded = false;\n      this.devDetail = device;\n      let params = ['xytVxvDJSD7Qqse1VOKdd'];\n      params.push(this.devDetail._id);\n      let senList = this.devDetail.sensors.map((sensor) => {\n        return sensor._id;\n      });\n      params.push(senList.join(','));\n      if (this.devDetail.lastEntry) {\n        params.push(new Date(new Date(this.devDetail.lastEntry) - 60 * 1000));\n      }\n\n      try {\n        const res = await this.$store.dispatch('devices/getData', params);\n        if (res.series) {\n          res.series.forEach((serie) => {\n            console.log('SERIE: ', serie);\n            let idSen = serie.sensor;\n            if (serie.samples) {\n              let value = serie.samples[serie.samples.length - 1].value;\n              this.devDetail.sensors.forEach((sensor) => {\n                if (sensor._id === idSen) {\n                  console.log('------> anadido: ', value);\n                  sensor.lastData = value ? value : '-';\n                }\n              });\n            }\n          });\n        }\n        console.log('--->', this.devDetail);\n      } catch (err) {\n        console.log('[ERROR] - getLastData: ' + err.message);\n      }\n      this.devLoaded = true;\n    },\n  },\n\n  async created() {\n    await this.loadProjects();\n    await this.loadAllDevices();\n    this.loadCoordinates();\n    this.mapbox = Mapbox;\n  },\n};\n</script>\n\n<style scopped>\n.flexcard {\n  display: flex;\n  flex-direction: column;\n}\n\n.flexcard .v-toolbar {\n  flex: 0;\n}\n</style>\n"]}]}