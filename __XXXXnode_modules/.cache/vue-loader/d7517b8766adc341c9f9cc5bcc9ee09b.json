{"remainingRequest":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/views/Mapa.vue?vue&type=style&index=0&s=true&lang=css&","dependencies":[{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/src/views/Mapa.vue","mtime":1652543623137},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/david/Documentos/Formacion/Udemy/VUE.JS/project/vuepo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmZsZXhjYXJkIHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47Cn0KCi5mbGV4Y2FyZCAudi10b29sYmFyIHsKICBmbGV4OiAwOwp9Cg=="},{"version":3,"sources":["Mapa.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Mapa.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n    <Loading :loading=\"cargando\"></Loading>\n    <Title\n      :title=\"'Mapa'\"\n      :color=\"'secondary--text'\"\n      :path=\"`Home / Mapa /`\"\n    ></Title>\n    <v-row>\n      <v-col cols=\"9\">\n        <MglMap\n          :accessToken=\"accessToken\"\n          :mapStyle=\"mapStyle\"\n          :center=\"coordinates\"\n          @load=\"onMapLoad\"\n        >\n          <MglMarker\n            v-for=\"device in devices.devicesList\"\n            :coordinates.sync=\"device.location.coordinates\"\n            color=\"blue\"\n            :key=\"device._id\"\n          />\n\n          <!--MglMarker :coordinates.sync=\"coordinates\" color=\"blue\" /-->\n        </MglMap>\n      </v-col>\n      <v-col cols=\"3\">\n        <v-card class=\"pa-5 mb-2\" outlined tile height=\"100%\"> sfsd </v-card>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script>\nimport Title from '@/components/Title';\nimport Loading from '@/components/Loading';\nimport { mapState } from 'vuex';\n\nimport Mapbox from 'mapbox-gl';\nimport { MglMap, MglMarker } from 'vue-mapbox';\n\nexport default {\n  data() {\n    return {\n      cargando: false,\n      accessToken: process.env.VUE_APP_MAPBOX_TOKEN,\n      mapStyle: 'mapbox://styles/mapbox/light-v10',\n      coordinates: [2.9862918733796486, 39.57380640335257],\n    };\n  },\n  components: {\n    Title,\n    Loading,\n    MglMap,\n    MglMarker,\n  },\n  computed: {\n    ...mapState(['projects', 'users', 'devices']),\n  },\n  methods: {\n    /**\n     * This method is used for get group info in devices objects.\n     * By default, each device only contains _id group field.\n     * In order to provide update and create functions, is\n     * necessary dispose this info in forms.\n     */\n    populateProGrp() {\n      // Group treatment Get idGroup and name\n      const ldevPop = []; //\n      this.devices.devicesList.forEach((dev) => {\n        const idPro = dev.project._id;\n        const idGrp = dev.group;\n        const pro = this.projects.projectList.find(\n          (item) => item._id === idPro\n        );\n        const grp = pro.groups.find((item) => item._id === idGrp);\n        if (!pro || !grp) {\n          console.log('MALLLLLL grupo o proyecto no encontrado!!!!');\n        } else {\n          delete dev.group;\n          let ngrp = {\n            _id: grp._id,\n            name: grp.name,\n            code: grp.code,\n          };\n          dev.group = ngrp;\n        }\n        ldevPop.push(dev);\n        //console.log('DEV->', dev);\n      });\n      this.$store.dispatch('devices/passDevicesPopulated', ldevPop);\n    },\n\n    async loadDevices() {\n      try {\n        const token = this.users.user.token;\n        let ids = this.projects.projectList.map((project) => project._id);\n        const params = [token, ids];\n        await this.$store.dispatch('devices/getAllDevPro', params);\n        this.populateProGrp();\n      } catch (e) {\n        console.log('[ERROR] - LoadDevices: ' + e.message);\n      }\n    },\n\n    loadCoordinates() {\n      const defCoor = [2.9862918733796486, 39.57380640335257];\n      this.coordinates = defCoor;\n      // const location = this.devices.deviceSelected.location;\n\n      // if (location && location.coordinates && location.coordinates.length === 2) {\n      //   this.coordinates = location.coordinates;\n      // }\n    },\n\n    async onMapLoad(event) {\n      const asyncActions = event.component.actions;\n\n      const newParams = await asyncActions.flyTo({\n        center: this.coordinates,\n        zoom: 9,\n        speed: 2,\n      });\n    },\n  },\n\n  created() {\n    this.loadDevices();\n    this.loadCoordinates();\n    this.mapbox = Mapbox;\n  },\n};\n</script>\n\n<style s>\n.flexcard {\n  display: flex;\n  flex-direction: column;\n}\n\n.flexcard .v-toolbar {\n  flex: 0;\n}\n</style>\n"]}]}